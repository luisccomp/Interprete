
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20180905

module MenhirBasics = struct
  
  exception Error
  
  type token = 
    | WHILE of (
# 18 "sintatico.mly"
       (Lexing.position)
# 16 "sintatico.ml"
  )
    | VOID of (
# 23 "sintatico.mly"
       (Lexing.position)
# 21 "sintatico.ml"
  )
    | VIRG of (
# 44 "sintatico.mly"
       (Lexing.position)
# 26 "sintatico.ml"
  )
    | VEZESIGUAL of (
# 61 "sintatico.mly"
       (Lexing.position)
# 31 "sintatico.ml"
  )
    | VEZES of (
# 42 "sintatico.mly"
       (Lexing.position)
# 36 "sintatico.ml"
  )
    | SWITCH of (
# 53 "sintatico.mly"
       (Lexing.position)
# 41 "sintatico.ml"
  )
    | STRING of (
# 40 "sintatico.mly"
       (Lexing.position)
# 46 "sintatico.ml"
  )
    | STATIC of (
# 22 "sintatico.mly"
       (Lexing.position)
# 51 "sintatico.ml"
  )
    | RETURN of (
# 66 "sintatico.mly"
       (Lexing.position)
# 56 "sintatico.ml"
  )
    | READSTRING of (
# 49 "sintatico.mly"
       (Lexing.position)
# 61 "sintatico.ml"
  )
    | READINT of (
# 47 "sintatico.mly"
       (Lexing.position)
# 66 "sintatico.ml"
  )
    | READFLOAT of (
# 46 "sintatico.mly"
       (Lexing.position)
# 71 "sintatico.ml"
  )
    | READCHAR of (
# 48 "sintatico.mly"
       (Lexing.position)
# 76 "sintatico.ml"
  )
    | PUBLIC of (
# 20 "sintatico.mly"
       (Lexing.position)
# 81 "sintatico.ml"
  )
    | PTV of (
# 27 "sintatico.mly"
       (Lexing.position)
# 86 "sintatico.ml"
  )
    | PTO of (
# 28 "sintatico.mly"
       (Lexing.position)
# 91 "sintatico.ml"
  )
    | PRINT of (
# 72 "sintatico.mly"
       (Lexing.position)
# 96 "sintatico.ml"
  )
    | OULOG of (
# 38 "sintatico.mly"
       (Lexing.position)
# 101 "sintatico.ml"
  )
    | NOT of (
# 39 "sintatico.mly"
       (Lexing.position)
# 106 "sintatico.ml"
  )
    | MOD of (
# 65 "sintatico.mly"
       (Lexing.position)
# 111 "sintatico.ml"
  )
    | MENOSMENOS of (
# 51 "sintatico.mly"
       (Lexing.position)
# 116 "sintatico.ml"
  )
    | MENOSIGUAL of (
# 60 "sintatico.mly"
       (Lexing.position)
# 121 "sintatico.ml"
  )
    | MENOS of (
# 29 "sintatico.mly"
       (Lexing.position)
# 126 "sintatico.ml"
  )
    | MENORIGUAL of (
# 36 "sintatico.mly"
       (Lexing.position)
# 131 "sintatico.ml"
  )
    | MENOR of (
# 34 "sintatico.mly"
       (Lexing.position)
# 136 "sintatico.ml"
  )
    | MAISMAIS of (
# 50 "sintatico.mly"
       (Lexing.position)
# 141 "sintatico.ml"
  )
    | MAISIGUAL of (
# 59 "sintatico.mly"
       (Lexing.position)
# 146 "sintatico.ml"
  )
    | MAIS of (
# 19 "sintatico.mly"
       (Lexing.position)
# 151 "sintatico.ml"
  )
    | MAIORIGUAL of (
# 35 "sintatico.mly"
       (Lexing.position)
# 156 "sintatico.ml"
  )
    | MAIOR of (
# 33 "sintatico.mly"
       (Lexing.position)
# 161 "sintatico.ml"
  )
    | MAIN of (
# 11 "sintatico.mly"
       (Lexing.position)
# 166 "sintatico.ml"
  )
    | LITSTRING of (
# 69 "sintatico.mly"
       (string * Lexing.position)
# 171 "sintatico.ml"
  )
    | LITINT of (
# 68 "sintatico.mly"
       (int * Lexing.position)
# 176 "sintatico.ml"
  )
    | LITFLOAT of (
# 41 "sintatico.mly"
       (float * Lexing.position)
# 181 "sintatico.ml"
  )
    | LITCHAR of (
# 70 "sintatico.mly"
       (char * Lexing.position)
# 186 "sintatico.ml"
  )
    | LITBOOL of (
# 67 "sintatico.mly"
       (bool * Lexing.position)
# 191 "sintatico.ml"
  )
    | INT of (
# 26 "sintatico.mly"
       (Lexing.position)
# 196 "sintatico.ml"
  )
    | IGUAL of (
# 31 "sintatico.mly"
       (Lexing.position)
# 201 "sintatico.ml"
  )
    | IF of (
# 17 "sintatico.mly"
       (Lexing.position)
# 206 "sintatico.ml"
  )
    | ID of (
# 71 "sintatico.mly"
       (string * Lexing.position)
# 211 "sintatico.ml"
  )
    | FPAR of (
# 13 "sintatico.mly"
       (Lexing.position)
# 216 "sintatico.ml"
  )
    | FOR of (
# 58 "sintatico.mly"
       (Lexing.position)
# 221 "sintatico.ml"
  )
    | FLOAT of (
# 45 "sintatico.mly"
       (Lexing.position)
# 226 "sintatico.ml"
  )
    | FCOL of (
# 15 "sintatico.mly"
       (Lexing.position)
# 231 "sintatico.ml"
  )
    | FCHAVE of (
# 25 "sintatico.mly"
       (Lexing.position)
# 236 "sintatico.ml"
  )
    | EOF
    | ELSE of (
# 30 "sintatico.mly"
       (Lexing.position)
# 242 "sintatico.ml"
  )
    | ELOG of (
# 37 "sintatico.mly"
       (Lexing.position)
# 247 "sintatico.ml"
  )
    | DPTOS of (
# 52 "sintatico.mly"
       (Lexing.position)
# 252 "sintatico.ml"
  )
    | DIVIGUAL of (
# 63 "sintatico.mly"
       (Lexing.position)
# 257 "sintatico.ml"
  )
    | DIV of (
# 43 "sintatico.mly"
       (Lexing.position)
# 262 "sintatico.ml"
  )
    | DIFER of (
# 32 "sintatico.mly"
       (Lexing.position)
# 267 "sintatico.ml"
  )
    | DEFAULT of (
# 54 "sintatico.mly"
       (Lexing.position)
# 272 "sintatico.ml"
  )
    | CLASS of (
# 21 "sintatico.mly"
       (Lexing.position)
# 277 "sintatico.ml"
  )
    | CHAR of (
# 57 "sintatico.mly"
       (Lexing.position)
# 282 "sintatico.ml"
  )
    | CASE of (
# 55 "sintatico.mly"
       (Lexing.position)
# 287 "sintatico.ml"
  )
    | BREAK of (
# 56 "sintatico.mly"
       (Lexing.position)
# 292 "sintatico.ml"
  )
    | BOOLEAN of (
# 62 "sintatico.mly"
       (Lexing.position)
# 297 "sintatico.ml"
  )
    | ATRIB of (
# 16 "sintatico.mly"
       (Lexing.position)
# 302 "sintatico.ml"
  )
    | ARGV of (
# 64 "sintatico.mly"
       (Lexing.position)
# 307 "sintatico.ml"
  )
    | APAR of (
# 12 "sintatico.mly"
       (Lexing.position)
# 312 "sintatico.ml"
  )
    | ACOL of (
# 14 "sintatico.mly"
       (Lexing.position)
# 317 "sintatico.ml"
  )
    | ACHAVE of (
# 24 "sintatico.mly"
       (Lexing.position)
# 322 "sintatico.ml"
  )
  
end

include MenhirBasics

let _eRR =
  MenhirBasics.Error

# 3 "sintatico.mly"
  
  open Lexing
  (* Módulo contendo as definições dos nós da árvore sintática abstrata. *)
  open Ast
  open Sast

# 339 "sintatico.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | ACHAVE _ ->
          63
      | ACOL _ ->
          62
      | APAR _ ->
          61
      | ARGV _ ->
          60
      | ATRIB _ ->
          59
      | BOOLEAN _ ->
          58
      | BREAK _ ->
          57
      | CASE _ ->
          56
      | CHAR _ ->
          55
      | CLASS _ ->
          54
      | DEFAULT _ ->
          53
      | DIFER _ ->
          52
      | DIV _ ->
          51
      | DIVIGUAL _ ->
          50
      | DPTOS _ ->
          49
      | ELOG _ ->
          48
      | ELSE _ ->
          47
      | EOF ->
          46
      | FCHAVE _ ->
          45
      | FCOL _ ->
          44
      | FLOAT _ ->
          43
      | FOR _ ->
          42
      | FPAR _ ->
          41
      | ID _ ->
          40
      | IF _ ->
          39
      | IGUAL _ ->
          38
      | INT _ ->
          37
      | LITBOOL _ ->
          36
      | LITCHAR _ ->
          35
      | LITFLOAT _ ->
          34
      | LITINT _ ->
          33
      | LITSTRING _ ->
          32
      | MAIN _ ->
          31
      | MAIOR _ ->
          30
      | MAIORIGUAL _ ->
          29
      | MAIS _ ->
          28
      | MAISIGUAL _ ->
          27
      | MAISMAIS _ ->
          26
      | MENOR _ ->
          25
      | MENORIGUAL _ ->
          24
      | MENOS _ ->
          23
      | MENOSIGUAL _ ->
          22
      | MENOSMENOS _ ->
          21
      | MOD _ ->
          20
      | NOT _ ->
          19
      | OULOG _ ->
          18
      | PRINT _ ->
          17
      | PTO _ ->
          16
      | PTV _ ->
          15
      | PUBLIC _ ->
          14
      | READCHAR _ ->
          13
      | READFLOAT _ ->
          12
      | READINT _ ->
          11
      | READSTRING _ ->
          10
      | RETURN _ ->
          9
      | STATIC _ ->
          8
      | STRING _ ->
          7
      | SWITCH _ ->
          6
      | VEZES _ ->
          5
      | VEZESIGUAL _ ->
          4
      | VIRG _ ->
          3
      | VOID _ ->
          2
      | WHILE _ ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | ACHAVE _v ->
          Obj.repr _v
      | ACOL _v ->
          Obj.repr _v
      | APAR _v ->
          Obj.repr _v
      | ARGV _v ->
          Obj.repr _v
      | ATRIB _v ->
          Obj.repr _v
      | BOOLEAN _v ->
          Obj.repr _v
      | BREAK _v ->
          Obj.repr _v
      | CASE _v ->
          Obj.repr _v
      | CHAR _v ->
          Obj.repr _v
      | CLASS _v ->
          Obj.repr _v
      | DEFAULT _v ->
          Obj.repr _v
      | DIFER _v ->
          Obj.repr _v
      | DIV _v ->
          Obj.repr _v
      | DIVIGUAL _v ->
          Obj.repr _v
      | DPTOS _v ->
          Obj.repr _v
      | ELOG _v ->
          Obj.repr _v
      | ELSE _v ->
          Obj.repr _v
      | EOF ->
          Obj.repr ()
      | FCHAVE _v ->
          Obj.repr _v
      | FCOL _v ->
          Obj.repr _v
      | FLOAT _v ->
          Obj.repr _v
      | FOR _v ->
          Obj.repr _v
      | FPAR _v ->
          Obj.repr _v
      | ID _v ->
          Obj.repr _v
      | IF _v ->
          Obj.repr _v
      | IGUAL _v ->
          Obj.repr _v
      | INT _v ->
          Obj.repr _v
      | LITBOOL _v ->
          Obj.repr _v
      | LITCHAR _v ->
          Obj.repr _v
      | LITFLOAT _v ->
          Obj.repr _v
      | LITINT _v ->
          Obj.repr _v
      | LITSTRING _v ->
          Obj.repr _v
      | MAIN _v ->
          Obj.repr _v
      | MAIOR _v ->
          Obj.repr _v
      | MAIORIGUAL _v ->
          Obj.repr _v
      | MAIS _v ->
          Obj.repr _v
      | MAISIGUAL _v ->
          Obj.repr _v
      | MAISMAIS _v ->
          Obj.repr _v
      | MENOR _v ->
          Obj.repr _v
      | MENORIGUAL _v ->
          Obj.repr _v
      | MENOS _v ->
          Obj.repr _v
      | MENOSIGUAL _v ->
          Obj.repr _v
      | MENOSMENOS _v ->
          Obj.repr _v
      | MOD _v ->
          Obj.repr _v
      | NOT _v ->
          Obj.repr _v
      | OULOG _v ->
          Obj.repr _v
      | PRINT _v ->
          Obj.repr _v
      | PTO _v ->
          Obj.repr _v
      | PTV _v ->
          Obj.repr _v
      | PUBLIC _v ->
          Obj.repr _v
      | READCHAR _v ->
          Obj.repr _v
      | READFLOAT _v ->
          Obj.repr _v
      | READINT _v ->
          Obj.repr _v
      | READSTRING _v ->
          Obj.repr _v
      | RETURN _v ->
          Obj.repr _v
      | STATIC _v ->
          Obj.repr _v
      | STRING _v ->
          Obj.repr _v
      | SWITCH _v ->
          Obj.repr _v
      | VEZES _v ->
          Obj.repr _v
      | VEZESIGUAL _v ->
          Obj.repr _v
      | VIRG _v ->
          Obj.repr _v
      | VOID _v ->
          Obj.repr _v
      | WHILE _v ->
          Obj.repr _v
  
  and default_reduction =
    (8, "\000\000\000\000\000\000\000VURSTQ\000\000\000\000G\000\000\000\000\000\000P\000%\000\000\000\000\000/,-0.\000\000\000+\000\000\000\000\000A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000*\000\000\004\000)?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\014\000\000\r\000\000\000\000\000\030\028\029\031\000\000\000\000\000\000\000\000\000\000\015\000\021\022\000$\023\026!\025\024\027\000\000\000\000\000LM\016\000\000\005\000\000\000\000\000'\000\019\000\007\000\020\000B\000F\000\000J\000\000\000\000\000\000\000\000N\000D\001")
  
  and error =
    (64, "\000\002\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\001\000\002\000\001\000\000\000\000\000\128\000\000\000\000\000\000!\000\000\000\004\016\001 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\004!\000\000\000\004P\001 \000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\001cc@Q\000\253\180\001$\000\000\000\000\000\000\000\000\016\000\000\000\000@\000\000!\000\000\000\004P\001 \000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001c@Q\000\253\180\001$B@Q\000\249\164\000\004\000\000\000\000\000\004\000\000\000\002\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\002\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")
  
  and start =
    1
  
  and action =
    ((16, "\000\015\000]\000?\000k\000\003\0000\005\134\000\000\000\000\000\000\000\000\000\000\000\000\000\015\0007\005\134\000\t\000\000\000\004\000\019\005\134\000\030\0002\000\030\000\000\000T\000\000\006d\000\005\006d\006d\006d\000\000\000\000\000\000\000\000\000\000\000\007\t\130\006d\000\000\b`\006d\000^\006d\000\178\000\000\006d\001\006\006d\001Z\006d\001\174\006d\002\002\006d\002V\006d\002\170\006d\002\254\006d\003R\006d\003\166\006d\003\250\006d\004N\006d\004\162\000\000\005\222\t\130\000\000\000&\000\000\000\000\004\246\b\166\000\005\006d\000\004\006d\b\236\000\002\000U\006d\006\188\006d\t\\\006\188\000\"\t\130\000L\000\000\000&\006d\t2\000$\006d\000*\006d\005\222\006d\007\002\000\000\006d\007H\000\000\006d\007\142\006d\007\212\006\136\000\000\000\000\000\000\000\000\b\026\005J\000\136\006d\005\222\006d\000V\000.\006d\000T\000\000\000\148\000\000\000\000\006d\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Z\006\026\000E\006d\000\\\000\000\000\000\000\000\000V\000\172\000\000\000\029\000j\006d\000\t\000\176\000\000\000x\000\000\000U\000\000\000\150\000\000\000\152\000\000\005\134\000\000\000\002\005\134\000\000\000\182\000x\005\134\006d\000\158\000\017\000\160\000\160\000\000\000\003\000\000\000\000"), (16, "\001Y\001Y\001Y\000\021\002\166\001\130\000\022\000\006\000\n\000\014\000\018\000\021\001Y\000\022\001^\001Y\001Y\001Y\001Y\001Y\001Y\001Y\001Y\001Y\001Y\001Y\001Y\001Y\000^\002B\001\t\000\149\000\026\000:\000>\001Y\000F\001\t\001Y\002f\0019\000\157\001!\000N\001\t\001Y\001Y\001Y\001Y\001Y\000\245\000\245\000\245\002r\000R\000Z\001Y\000j\000\154\000v\0012\001F\000\245\001N\001Z\000\245\000\178\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\001v\001~\001\134\001\146\001\154\001\234\001\250\000\245\001\254\002\006\000\245\002\014\002:\002J\000\233\000\233\000\233\000\245\000\245\000\245\000\245\000\245\002Z\002^\002j\002v\000\233\002~t\000\000\000\000\000\000\000\000\000\000\001)\001\014\001)\001\194\000\214\001\022\001)\000\000\000\000\000\000\000\000\000\000\001\202\000\000\000\000\001)\001)\001)\001)\001)\000\000\000r\001)\001)\000\000\001)\001J\000\000\001)\001j\002>\000\000\000\000\000\000\000\000\000\000\000\000\001r\000\000\000z\001)\000\000\000\000\000~\001)\000\000\000\000\000\000\001\206\001\210\001\214\001\218\000\130\000\134\000\138\000\142\000\146\000z\000\000\001\130\000\150\000~\001\150\000\000\000\000\000\137\000\000\000\000\000\000\000\170\000\130\000\134\000\138\000\142\000\146\000\000\000\000\000\137\000\150\000A\000\000\000\158\000\190\000\178\000\198\000\000\000\000\000\206\000\222\000\238\000\000\000\000\000\230\000\246\000\254\000\000\000\000\000\000\000\000\000\158\000\000\000\000\001\006\000\000\000\170\000A\000\000\000\000\000\000\000\000\000\000\000\000\001\014\001fz\001\142\000\000\000\000\000~\000\000\000\000\000\000\001\014\000\000\000\000\000\214\001\022\000\130\000\134\000\138\000\142\000\146\000\000\000z\000\000\000\150\000E\000~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\000\134\000\138\000\142\000\146\000\000\000\000\000\000\000\150\000\005\000\158\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\158"))
  
  and lhs =
    (8, "\000\027\027\027\026\025\025\024\024\024\024\024\024\024\023\022\021\021\020\019\018\018\017\017\017\017\016\016\016\016\016\016\016\016\015\015\014\r\r\r\012\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\n\t\t\b\b\007\006\006\006\005\005\005\004\003\003\002\002\002\002\002\002\001")
  
  and goto =
b\000\000\002\014\000\000\002\018\000\000\002\026\000\000\000\000\000\000\0002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000.\000\000\002 \000\000\000\000\000\012\002*\000\000\000^\0022\000\000\000\000\000b\000\000\000\000\000\000\0028\000\000\000\000\000\142\000\000\001\174\000\000\002<\000\000\000\000\002B\000\000\000\000\002J\000\000\002T\000\000\002Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002b\000\000\001\178\000\000\000\000\000\190\000\000\000\000\000\000\000\000\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0008\0006\001\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000L\000\000\001N\000\000\000\000\000\000\000\000\000\000\0008\000\000\000\000\000\000\000\000\000\000\002d\000\000\000\000\000\002\000\000\000\000\000\000\002r\001~\000\000\000\\\000\000\000\000\000\000\000\130\000\000\000\000"), (8, ")\017)\017\183\019\169\171\169\014hyI/\165\131\133\134\136\137\138\139\140\141)\026)\025L\172\181\153\161\149hyI/\163\131\133\134\136\137\138\139\140\141)\148)\159K\162\161\178\181\000hyI/\150\131\133\134\136\137\138\139\140\141)\022\182\181_\000\000\028\000\000hy\000\167\142\131\133\134\136\137\138\139\140\141)\000)\000\000\000\000\000\000\000hyP/\129\131\133\134\136\137\138\139\140\141)\000)\000\000\000\000\000\000\000hyO/\135\131\133\134\136\137\138\139\140\141)\000)\000\000\000\000\000\000\000hyN/\146\131\133\134\136\137\138\139\140\141)\000)\000\000\000\000\000\000\000hy*/\156\131\133\134\136\137\138\139\140\141)\000)\000\000\000\000\000\000\000hy,/\176\131\133\134\136\137\138\139\140\141)\000)\000\000\000\000\000)\000hyhy\000z)~./\138)\138\141)\1411/)\000)3/)5/)\0007/9/);/)=/)\000)\000?/)A/)C/E/)\000G/)U/)\000)Y/)\000\\/)c/j/)m/)\000p/)\000\022r/\000x/\168\022|/\000\000\167\175\000\000\000\000\000\167"))
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Sast.expressao Ast.expressoes) = 
# 180 "sintatico.mly"
                                         ( [] )
# 637 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let e : (Sast.expressao) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v : (Sast.expressao Ast.expressoes) = 
# 181 "sintatico.mly"
                                         ( [e] )
# 662 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = args;
          MenhirLib.EngineTypes.startp = _startpos_args_;
          MenhirLib.EngineTypes.endp = _endpos_args_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let args : (Sast.expressao Ast.expressoes) = Obj.magic args in
        let _2 : (
# 44 "sintatico.mly"
       (Lexing.position)
# 694 "sintatico.ml"
        ) = Obj.magic _2 in
        let e : (Sast.expressao) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_args_ in
        let _v : (Sast.expressao Ast.expressoes) = 
# 182 "sintatico.mly"
                                         ( e :: args )
# 703 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = cs;
              MenhirLib.EngineTypes.startp = _startpos_cs_;
              MenhirLib.EngineTypes.endp = _endpos_cs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = e;
                  MenhirLib.EngineTypes.startp = _startpos_e_;
                  MenhirLib.EngineTypes.endp = _endpos_e_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 27 "sintatico.mly"
       (Lexing.position)
# 749 "sintatico.ml"
        ) = Obj.magic _6 in
        let _5 : (
# 56 "sintatico.mly"
       (Lexing.position)
# 754 "sintatico.ml"
        ) = Obj.magic _5 in
        let cs : (Sast.expressao Ast.comandos) = Obj.magic cs in
        let _3 : (
# 52 "sintatico.mly"
       (Lexing.position)
# 760 "sintatico.ml"
        ) = Obj.magic _3 in
        let e : (Sast.expressao) = Obj.magic e in
        let _1 : (
# 55 "sintatico.mly"
       (Lexing.position)
# 766 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Sast.expressao Ast.case) = 
# 156 "sintatico.mly"
                                               ( Case (e, cs) )
# 774 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Sast.expressao Ast.cases) = 
# 152 "sintatico.mly"
                        ( [] )
# 792 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = c;
            MenhirLib.EngineTypes.startp = _startpos_c_;
            MenhirLib.EngineTypes.endp = _endpos_c_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let cs : (Sast.expressao Ast.cases) = Obj.magic cs in
        let c : (Sast.expressao Ast.case) = Obj.magic c in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_c_ in
        let _endpos = _endpos_cs_ in
        let _v : (Sast.expressao Ast.cases) = 
# 153 "sintatico.mly"
                        ( c :: cs )
# 823 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let _2 : (
# 16 "sintatico.mly"
       (Lexing.position)
# 855 "sintatico.ml"
        ) = Obj.magic _2 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao Ast.comando) = 
# 186 "sintatico.mly"
                                           ( CmdAtrib (ee, ed) )
# 864 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos;
            MenhirLib.EngineTypes.startp = _startpos_pos_;
            MenhirLib.EngineTypes.endp = _endpos_pos_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos : (
# 59 "sintatico.mly"
       (Lexing.position)
# 896 "sintatico.ml"
        ) = Obj.magic pos in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao Ast.comando) = 
# 187 "sintatico.mly"
                                           ( CmdAtrib (ee, ExpOp ((Soma, pos), ee, ed)) )
# 905 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos;
            MenhirLib.EngineTypes.startp = _startpos_pos_;
            MenhirLib.EngineTypes.endp = _endpos_pos_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos : (
# 60 "sintatico.mly"
       (Lexing.position)
# 937 "sintatico.ml"
        ) = Obj.magic pos in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao Ast.comando) = 
# 188 "sintatico.mly"
                                           ( CmdAtrib (ee, ExpOp ((Sub, pos), ee, ed)) )
# 946 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos;
            MenhirLib.EngineTypes.startp = _startpos_pos_;
            MenhirLib.EngineTypes.endp = _endpos_pos_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos : (
# 61 "sintatico.mly"
       (Lexing.position)
# 978 "sintatico.ml"
        ) = Obj.magic pos in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao Ast.comando) = 
# 189 "sintatico.mly"
                                           ( CmdAtrib (ee, ExpOp ((Mult, pos), ee, ed)) )
# 987 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos;
            MenhirLib.EngineTypes.startp = _startpos_pos_;
            MenhirLib.EngineTypes.endp = _endpos_pos_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos : (
# 63 "sintatico.mly"
       (Lexing.position)
# 1019 "sintatico.ml"
        ) = Obj.magic pos in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao Ast.comando) = 
# 190 "sintatico.mly"
                                           ( CmdAtrib (ee, ExpOp ((Div, pos), ee, ed)) )
# 1028 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pos;
          MenhirLib.EngineTypes.startp = _startpos_pos_;
          MenhirLib.EngineTypes.endp = _endpos_pos_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ee;
            MenhirLib.EngineTypes.startp = _startpos_ee_;
            MenhirLib.EngineTypes.endp = _endpos_ee_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let pos : (
# 50 "sintatico.mly"
       (Lexing.position)
# 1054 "sintatico.ml"
        ) = Obj.magic pos in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_pos_ in
        let _v : (Sast.expressao Ast.comando) = 
# 191 "sintatico.mly"
                                           ( CmdAtrib (ee, ExpOp ((Soma, pos), ee, ExpInt (1, pos))) )
# 1063 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pos;
          MenhirLib.EngineTypes.startp = _startpos_pos_;
          MenhirLib.EngineTypes.endp = _endpos_pos_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ee;
            MenhirLib.EngineTypes.startp = _startpos_ee_;
            MenhirLib.EngineTypes.endp = _endpos_ee_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let pos : (
# 51 "sintatico.mly"
       (Lexing.position)
# 1089 "sintatico.ml"
        ) = Obj.magic pos in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_pos_ in
        let _v : (Sast.expressao Ast.comando) = 
# 192 "sintatico.mly"
                                           ( CmdAtrib (ee, ExpOp ((Sub, pos), ee, ExpInt (1, pos))) )
# 1098 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = cs;
            MenhirLib.EngineTypes.startp = _startpos_cs_;
            MenhirLib.EngineTypes.endp = _endpos_cs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ca;
                  MenhirLib.EngineTypes.startp = _startpos_ca_;
                  MenhirLib.EngineTypes.endp = _endpos_ca_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _6;
                    MenhirLib.EngineTypes.startp = _startpos__6_;
                    MenhirLib.EngineTypes.endp = _endpos__6_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = e;
                      MenhirLib.EngineTypes.startp = _startpos_e_;
                      MenhirLib.EngineTypes.endp = _endpos_e_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _4;
                        MenhirLib.EngineTypes.startp = _startpos__4_;
                        MenhirLib.EngineTypes.endp = _endpos__4_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = ci;
                          MenhirLib.EngineTypes.startp = _startpos_ci_;
                          MenhirLib.EngineTypes.endp = _endpos_ci_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = _2;
                            MenhirLib.EngineTypes.startp = _startpos__2_;
                            MenhirLib.EngineTypes.endp = _endpos__2_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (
# 25 "sintatico.mly"
       (Lexing.position)
# 1169 "sintatico.ml"
        ) = Obj.magic _11 in
        let cs : (Sast.expressao Ast.comandos) = Obj.magic cs in
        let _9 : (
# 24 "sintatico.mly"
       (Lexing.position)
# 1175 "sintatico.ml"
        ) = Obj.magic _9 in
        let _8 : (
# 13 "sintatico.mly"
       (Lexing.position)
# 1180 "sintatico.ml"
        ) = Obj.magic _8 in
        let ca : (Sast.expressao Ast.comando) = Obj.magic ca in
        let _6 : (
# 27 "sintatico.mly"
       (Lexing.position)
# 1186 "sintatico.ml"
        ) = Obj.magic _6 in
        let e : (Sast.expressao) = Obj.magic e in
        let _4 : (
# 27 "sintatico.mly"
       (Lexing.position)
# 1192 "sintatico.ml"
        ) = Obj.magic _4 in
        let ci : (Sast.expressao Ast.comando) = Obj.magic ci in
        let _2 : (
# 12 "sintatico.mly"
       (Lexing.position)
# 1198 "sintatico.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 58 "sintatico.mly"
       (Lexing.position)
# 1203 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Sast.expressao Ast.comando) = 
# 143 "sintatico.mly"
                                                                                           ( CmdFor (ci, e, ca, cs) )
# 1211 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pe;
          MenhirLib.EngineTypes.startp = _startpos_pe_;
          MenhirLib.EngineTypes.endp = _endpos_pe_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = cs;
              MenhirLib.EngineTypes.startp = _startpos_cs_;
              MenhirLib.EngineTypes.endp = _endpos_cs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = e;
                    MenhirLib.EngineTypes.startp = _startpos_e_;
                    MenhirLib.EngineTypes.endp = _endpos_e_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let pe : (Sast.expressao Ast.comandos option) = Obj.magic pe in
        let _7 : (
# 25 "sintatico.mly"
       (Lexing.position)
# 1268 "sintatico.ml"
        ) = Obj.magic _7 in
        let cs : (Sast.expressao Ast.comandos) = Obj.magic cs in
        let _5 : (
# 24 "sintatico.mly"
       (Lexing.position)
# 1274 "sintatico.ml"
        ) = Obj.magic _5 in
        let _4 : (
# 13 "sintatico.mly"
       (Lexing.position)
# 1279 "sintatico.ml"
        ) = Obj.magic _4 in
        let e : (Sast.expressao) = Obj.magic e in
        let _2 : (
# 12 "sintatico.mly"
       (Lexing.position)
# 1285 "sintatico.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 17 "sintatico.mly"
       (Lexing.position)
# 1290 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_pe_ in
        let _v : (Sast.expressao Ast.comando) = 
# 146 "sintatico.mly"
                                                                     ( CmdIf (e, cs, pe) )
# 1298 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Sast.expressao) = Obj.magic e in
        let _1 : (
# 66 "sintatico.mly"
       (Lexing.position)
# 1325 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : (Sast.expressao Ast.comando) = 
# 196 "sintatico.mly"
                           ( CmdReturn (Some e) )
# 1333 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 66 "sintatico.mly"
       (Lexing.position)
# 1354 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Sast.expressao Ast.comando) = 
# 197 "sintatico.mly"
                           ( CmdReturn None )
# 1362 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = cs;
              MenhirLib.EngineTypes.startp = _startpos_cs_;
              MenhirLib.EngineTypes.endp = _endpos_cs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = e;
                    MenhirLib.EngineTypes.startp = _startpos_e_;
                    MenhirLib.EngineTypes.endp = _endpos_e_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (
# 25 "sintatico.mly"
       (Lexing.position)
# 1418 "sintatico.ml"
        ) = Obj.magic _8 in
        let d : (Sast.expressao Ast.default option) = Obj.magic d in
        let cs : (Sast.expressao Ast.cases) = Obj.magic cs in
        let _5 : (
# 24 "sintatico.mly"
       (Lexing.position)
# 1425 "sintatico.ml"
        ) = Obj.magic _5 in
        let _4 : (
# 13 "sintatico.mly"
       (Lexing.position)
# 1430 "sintatico.ml"
        ) = Obj.magic _4 in
        let e : (Sast.expressao) = Obj.magic e in
        let _2 : (
# 12 "sintatico.mly"
       (Lexing.position)
# 1436 "sintatico.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 53 "sintatico.mly"
       (Lexing.position)
# 1441 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Sast.expressao Ast.comando) = 
# 149 "sintatico.mly"
                                                                      ( CmdSwitch (e, cs, d) )
# 1449 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = cs;
            MenhirLib.EngineTypes.startp = _startpos_cs_;
            MenhirLib.EngineTypes.endp = _endpos_cs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = e;
                  MenhirLib.EngineTypes.startp = _startpos_e_;
                  MenhirLib.EngineTypes.endp = _endpos_e_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 25 "sintatico.mly"
       (Lexing.position)
# 1500 "sintatico.ml"
        ) = Obj.magic _7 in
        let cs : (Sast.expressao Ast.comandos) = Obj.magic cs in
        let _5 : (
# 24 "sintatico.mly"
       (Lexing.position)
# 1506 "sintatico.ml"
        ) = Obj.magic _5 in
        let _4 : (
# 13 "sintatico.mly"
       (Lexing.position)
# 1511 "sintatico.ml"
        ) = Obj.magic _4 in
        let e : (Sast.expressao) = Obj.magic e in
        let _2 : (
# 12 "sintatico.mly"
       (Lexing.position)
# 1517 "sintatico.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 18 "sintatico.mly"
       (Lexing.position)
# 1522 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Sast.expressao Ast.comando) = 
# 140 "sintatico.mly"
                                                             ( CmdWhile (e, cs) )
# 1530 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = c;
            MenhirLib.EngineTypes.startp = _startpos_c_;
            MenhirLib.EngineTypes.endp = _endpos_c_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 27 "sintatico.mly"
       (Lexing.position)
# 1556 "sintatico.ml"
        ) = Obj.magic _2 in
        let c : (Sast.expressao Ast.comando) = Obj.magic c in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_c_ in
        let _endpos = _endpos__2_ in
        let _v : (Sast.expressao Ast.comando) = 
# 129 "sintatico.mly"
                          ( c )
# 1565 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let c : (Sast.expressao Ast.comando) = Obj.magic c in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_c_ in
        let _endpos = _endpos_c_ in
        let _v : (Sast.expressao Ast.comando) = 
# 130 "sintatico.mly"
                          ( c )
# 1590 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let c : (Sast.expressao Ast.comando) = Obj.magic c in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_c_ in
        let _endpos = _endpos_c_ in
        let _v : (Sast.expressao Ast.comando) = 
# 134 "sintatico.mly"
                         ( c )
# 1615 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let c : (Sast.expressao Ast.comando) = Obj.magic c in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_c_ in
        let _endpos = _endpos_c_ in
        let _v : (Sast.expressao Ast.comando) = 
# 135 "sintatico.mly"
                         ( c )
# 1640 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let c : (Sast.expressao Ast.comando) = Obj.magic c in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_c_ in
        let _endpos = _endpos_c_ in
        let _v : (Sast.expressao Ast.comando) = 
# 136 "sintatico.mly"
                         ( c )
# 1665 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let c : (Sast.expressao Ast.comando) = Obj.magic c in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_c_ in
        let _endpos = _endpos_c_ in
        let _v : (Sast.expressao Ast.comando) = 
# 137 "sintatico.mly"
                         ( c )
# 1690 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let c : (Sast.expressao Ast.comando) = Obj.magic c in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_c_ in
        let _endpos = _endpos_c_ in
        let _v : (Sast.expressao Ast.comando) = 
# 170 "sintatico.mly"
                                            ( c )
# 1715 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 47 "sintatico.mly"
       (Lexing.position)
# 1746 "sintatico.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 16 "sintatico.mly"
       (Lexing.position)
# 1751 "sintatico.ml"
        ) = Obj.magic _2 in
        let e : (Sast.expressao) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__3_ in
        let _v : (Sast.expressao Ast.comando) = 
# 171 "sintatico.mly"
                                            ( CmdReadInt e )
# 1760 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 46 "sintatico.mly"
       (Lexing.position)
# 1791 "sintatico.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 16 "sintatico.mly"
       (Lexing.position)
# 1796 "sintatico.ml"
        ) = Obj.magic _2 in
        let e : (Sast.expressao) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__3_ in
        let _v : (Sast.expressao Ast.comando) = 
# 172 "sintatico.mly"
                                            ( CmdReadFloat e )
# 1805 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 49 "sintatico.mly"
       (Lexing.position)
# 1836 "sintatico.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 16 "sintatico.mly"
       (Lexing.position)
# 1841 "sintatico.ml"
        ) = Obj.magic _2 in
        let e : (Sast.expressao) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__3_ in
        let _v : (Sast.expressao Ast.comando) = 
# 173 "sintatico.mly"
                                            ( CmdReadString e )
# 1850 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 48 "sintatico.mly"
       (Lexing.position)
# 1881 "sintatico.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 16 "sintatico.mly"
       (Lexing.position)
# 1886 "sintatico.ml"
        ) = Obj.magic _2 in
        let e : (Sast.expressao) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__3_ in
        let _v : (Sast.expressao Ast.comando) = 
# 174 "sintatico.mly"
                                            ( CmdReadChar e )
# 1895 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = args;
            MenhirLib.EngineTypes.startp = _startpos_args_;
            MenhirLib.EngineTypes.endp = _endpos_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 13 "sintatico.mly"
       (Lexing.position)
# 1931 "sintatico.ml"
        ) = Obj.magic _4 in
        let args : (Sast.expressao Ast.expressoes) = Obj.magic args in
        let _2 : (
# 12 "sintatico.mly"
       (Lexing.position)
# 1937 "sintatico.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 72 "sintatico.mly"
       (Lexing.position)
# 1942 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Sast.expressao Ast.comando) = 
# 175 "sintatico.mly"
                                            ( CmdPrint args )
# 1950 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let c : (Sast.expressao Ast.comando) = Obj.magic c in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_c_ in
        let _endpos = _endpos_c_ in
        let _v : (Sast.expressao Ast.comando) = 
# 176 "sintatico.mly"
                                            ( c )
# 1975 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let e : (Sast.expressao) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v : (Sast.expressao Ast.comando) = 
# 177 "sintatico.mly"
                                            ( CmdFun e )
# 2000 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Sast.expressao Ast.comandos) = 
# 124 "sintatico.mly"
                                 ( [] )
# 2018 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = c;
            MenhirLib.EngineTypes.startp = _startpos_c_;
            MenhirLib.EngineTypes.endp = _endpos_c_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let cs : (Sast.expressao Ast.comandos) = Obj.magic cs in
        let c : (Sast.expressao Ast.comando) = Obj.magic c in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_c_ in
        let _endpos = _endpos_cs_ in
        let _v : (Sast.expressao Ast.comandos) = 
# 125 "sintatico.mly"
                                 ( c :: cs )
# 2049 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 27 "sintatico.mly"
       (Lexing.position)
# 2080 "sintatico.ml"
        ) = Obj.magic _3 in
        let ids : (Ast.ident Ast.pos list) = Obj.magic ids in
        let t : (Ast.tipo) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos__3_ in
        let _v : (Ast.declaracao list) = 
# 112 "sintatico.mly"
                                                                ( List.map (fun id -> DecVar (id, t)) ids )
# 2090 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Sast.expressao Ast.default option) = 
# 159 "sintatico.mly"
                                             ( None )
# 2108 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = cs;
              MenhirLib.EngineTypes.startp = _startpos_cs_;
              MenhirLib.EngineTypes.endp = _endpos_cs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (
# 27 "sintatico.mly"
       (Lexing.position)
# 2149 "sintatico.ml"
        ) = Obj.magic _5 in
        let _4 : (
# 56 "sintatico.mly"
       (Lexing.position)
# 2154 "sintatico.ml"
        ) = Obj.magic _4 in
        let cs : (Sast.expressao Ast.comandos) = Obj.magic cs in
        let _2 : (
# 52 "sintatico.mly"
       (Lexing.position)
# 2160 "sintatico.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 54 "sintatico.mly"
       (Lexing.position)
# 2165 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Sast.expressao Ast.default option) = 
# 160 "sintatico.mly"
                                             ( Some (Default cs) )
# 2173 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let cs : (Sast.expressao Ast.comandos) = Obj.magic cs in
        let _2 : (
# 52 "sintatico.mly"
       (Lexing.position)
# 2205 "sintatico.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 54 "sintatico.mly"
       (Lexing.position)
# 2210 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cs_ in
        let _v : (Sast.expressao Ast.default option) = 
# 161 "sintatico.mly"
                                             ( Some (Default cs) )
# 2218 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = args;
            MenhirLib.EngineTypes.startp = _startpos_args_;
            MenhirLib.EngineTypes.endp = _endpos_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 13 "sintatico.mly"
       (Lexing.position)
# 2254 "sintatico.ml"
        ) = Obj.magic _4 in
        let args : (Sast.expressao Ast.expressoes) = Obj.magic args in
        let _2 : (
# 12 "sintatico.mly"
       (Lexing.position)
# 2260 "sintatico.ml"
        ) = Obj.magic _2 in
        let x : (
# 71 "sintatico.mly"
       (string * Lexing.position)
# 2265 "sintatico.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__4_ in
        let _v : (Sast.expressao) = 
# 216 "sintatico.mly"
                                         ( ExpFun (x, args) )
# 2273 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 13 "sintatico.mly"
       (Lexing.position)
# 2304 "sintatico.ml"
        ) = Obj.magic _3 in
        let e : (Sast.expressao) = Obj.magic e in
        let _1 : (
# 12 "sintatico.mly"
       (Lexing.position)
# 2310 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Sast.expressao) = 
# 201 "sintatico.mly"
                                     ( e )
# 2318 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let v : (Sast.expressao Ast.variavel) = Obj.magic v in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_v_ in
        let _endpos = _endpos_v_ in
        let _v : (Sast.expressao) = 
# 202 "sintatico.mly"
                                     ( ExpVar v )
# 2343 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 68 "sintatico.mly"
       (int * Lexing.position)
# 2364 "sintatico.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Sast.expressao) = 
# 203 "sintatico.mly"
                                     ( ExpInt i )
# 2372 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let f : (
# 41 "sintatico.mly"
       (float * Lexing.position)
# 2393 "sintatico.ml"
        ) = Obj.magic f in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_f_ in
        let _v : (Sast.expressao) = 
# 204 "sintatico.mly"
                                     ( ExpFloat f )
# 2401 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let b : (
# 67 "sintatico.mly"
       (bool * Lexing.position)
# 2422 "sintatico.ml"
        ) = Obj.magic b in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_b_ in
        let _endpos = _endpos_b_ in
        let _v : (Sast.expressao) = 
# 205 "sintatico.mly"
                                     ( ExpBool b )
# 2430 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 69 "sintatico.mly"
       (string * Lexing.position)
# 2451 "sintatico.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (Sast.expressao) = 
# 206 "sintatico.mly"
                                     ( ExpString s )
# 2459 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let c : (
# 70 "sintatico.mly"
       (char * Lexing.position)
# 2480 "sintatico.ml"
        ) = Obj.magic c in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_c_ in
        let _endpos = _endpos_c_ in
        let _v : (Sast.expressao) = 
# 207 "sintatico.mly"
                                     ( ExpChar c )
# 2488 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos0;
            MenhirLib.EngineTypes.startp = _startpos_pos0_;
            MenhirLib.EngineTypes.endp = _endpos_pos0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos0 : (
# 19 "sintatico.mly"
       (Lexing.position)
# 2520 "sintatico.ml"
        ) = Obj.magic pos0 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao) = let op =
          let pos = pos0 in
          
# 220 "sintatico.mly"
                              ( (Soma, pos) )
# 2531 "sintatico.ml"
          
        in
        
# 208 "sintatico.mly"
                                     ( ExpOp (op, ee, ed) )
# 2537 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos0;
            MenhirLib.EngineTypes.startp = _startpos_pos0_;
            MenhirLib.EngineTypes.endp = _endpos_pos0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos0 : (
# 29 "sintatico.mly"
       (Lexing.position)
# 2569 "sintatico.ml"
        ) = Obj.magic pos0 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao) = let op =
          let pos = pos0 in
          
# 221 "sintatico.mly"
                              ( (Sub, pos) )
# 2580 "sintatico.ml"
          
        in
        
# 208 "sintatico.mly"
                                     ( ExpOp (op, ee, ed) )
# 2586 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos0;
            MenhirLib.EngineTypes.startp = _startpos_pos0_;
            MenhirLib.EngineTypes.endp = _endpos_pos0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos0 : (
# 31 "sintatico.mly"
       (Lexing.position)
# 2618 "sintatico.ml"
        ) = Obj.magic pos0 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao) = let op =
          let pos = pos0 in
          
# 222 "sintatico.mly"
                              ( (Igual, pos) )
# 2629 "sintatico.ml"
          
        in
        
# 208 "sintatico.mly"
                                     ( ExpOp (op, ee, ed) )
# 2635 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos0;
            MenhirLib.EngineTypes.startp = _startpos_pos0_;
            MenhirLib.EngineTypes.endp = _endpos_pos0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos0 : (
# 32 "sintatico.mly"
       (Lexing.position)
# 2667 "sintatico.ml"
        ) = Obj.magic pos0 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao) = let op =
          let pos = pos0 in
          
# 223 "sintatico.mly"
                              ( (Difer, pos) )
# 2678 "sintatico.ml"
          
        in
        
# 208 "sintatico.mly"
                                     ( ExpOp (op, ee, ed) )
# 2684 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos0;
            MenhirLib.EngineTypes.startp = _startpos_pos0_;
            MenhirLib.EngineTypes.endp = _endpos_pos0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos0 : (
# 33 "sintatico.mly"
       (Lexing.position)
# 2716 "sintatico.ml"
        ) = Obj.magic pos0 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao) = let op =
          let pos = pos0 in
          
# 224 "sintatico.mly"
                              ( (Maior, pos) )
# 2727 "sintatico.ml"
          
        in
        
# 208 "sintatico.mly"
                                     ( ExpOp (op, ee, ed) )
# 2733 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos0;
            MenhirLib.EngineTypes.startp = _startpos_pos0_;
            MenhirLib.EngineTypes.endp = _endpos_pos0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos0 : (
# 34 "sintatico.mly"
       (Lexing.position)
# 2765 "sintatico.ml"
        ) = Obj.magic pos0 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao) = let op =
          let pos = pos0 in
          
# 225 "sintatico.mly"
                              ( (Menor, pos) )
# 2776 "sintatico.ml"
          
        in
        
# 208 "sintatico.mly"
                                     ( ExpOp (op, ee, ed) )
# 2782 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos0;
            MenhirLib.EngineTypes.startp = _startpos_pos0_;
            MenhirLib.EngineTypes.endp = _endpos_pos0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos0 : (
# 35 "sintatico.mly"
       (Lexing.position)
# 2814 "sintatico.ml"
        ) = Obj.magic pos0 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao) = let op =
          let pos = pos0 in
          
# 226 "sintatico.mly"
                              ( (MaiorIgual, pos) )
# 2825 "sintatico.ml"
          
        in
        
# 208 "sintatico.mly"
                                     ( ExpOp (op, ee, ed) )
# 2831 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos0;
            MenhirLib.EngineTypes.startp = _startpos_pos0_;
            MenhirLib.EngineTypes.endp = _endpos_pos0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos0 : (
# 36 "sintatico.mly"
       (Lexing.position)
# 2863 "sintatico.ml"
        ) = Obj.magic pos0 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao) = let op =
          let pos = pos0 in
          
# 227 "sintatico.mly"
                              ( (MenorIgual, pos) )
# 2874 "sintatico.ml"
          
        in
        
# 208 "sintatico.mly"
                                     ( ExpOp (op, ee, ed) )
# 2880 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos0;
            MenhirLib.EngineTypes.startp = _startpos_pos0_;
            MenhirLib.EngineTypes.endp = _endpos_pos0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos0 : (
# 37 "sintatico.mly"
       (Lexing.position)
# 2912 "sintatico.ml"
        ) = Obj.magic pos0 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao) = let op =
          let pos = pos0 in
          
# 228 "sintatico.mly"
                              ( (E, pos) )
# 2923 "sintatico.ml"
          
        in
        
# 208 "sintatico.mly"
                                     ( ExpOp (op, ee, ed) )
# 2929 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos0;
            MenhirLib.EngineTypes.startp = _startpos_pos0_;
            MenhirLib.EngineTypes.endp = _endpos_pos0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos0 : (
# 38 "sintatico.mly"
       (Lexing.position)
# 2961 "sintatico.ml"
        ) = Obj.magic pos0 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao) = let op =
          let pos = pos0 in
          
# 229 "sintatico.mly"
                              ( (Ou, pos) )
# 2972 "sintatico.ml"
          
        in
        
# 208 "sintatico.mly"
                                     ( ExpOp (op, ee, ed) )
# 2978 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos0;
            MenhirLib.EngineTypes.startp = _startpos_pos0_;
            MenhirLib.EngineTypes.endp = _endpos_pos0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos0 : (
# 39 "sintatico.mly"
       (Lexing.position)
# 3010 "sintatico.ml"
        ) = Obj.magic pos0 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao) = let op =
          let pos = pos0 in
          
# 230 "sintatico.mly"
                              ( (Not, pos) )
# 3021 "sintatico.ml"
          
        in
        
# 208 "sintatico.mly"
                                     ( ExpOp (op, ee, ed) )
# 3027 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos0;
            MenhirLib.EngineTypes.startp = _startpos_pos0_;
            MenhirLib.EngineTypes.endp = _endpos_pos0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos0 : (
# 65 "sintatico.mly"
       (Lexing.position)
# 3059 "sintatico.ml"
        ) = Obj.magic pos0 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao) = let op =
          let pos = pos0 in
          
# 231 "sintatico.mly"
                              ( (Mod, pos) )
# 3070 "sintatico.ml"
          
        in
        
# 208 "sintatico.mly"
                                     ( ExpOp (op, ee, ed) )
# 3076 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos0;
            MenhirLib.EngineTypes.startp = _startpos_pos0_;
            MenhirLib.EngineTypes.endp = _endpos_pos0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos0 : (
# 43 "sintatico.mly"
       (Lexing.position)
# 3108 "sintatico.ml"
        ) = Obj.magic pos0 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao) = let op =
          let pos = pos0 in
          
# 232 "sintatico.mly"
                              ( (Div, pos) )
# 3119 "sintatico.ml"
          
        in
        
# 208 "sintatico.mly"
                                     ( ExpOp (op, ee, ed) )
# 3125 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ed;
          MenhirLib.EngineTypes.startp = _startpos_ed_;
          MenhirLib.EngineTypes.endp = _endpos_ed_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = pos0;
            MenhirLib.EngineTypes.startp = _startpos_pos0_;
            MenhirLib.EngineTypes.endp = _endpos_pos0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ed : (Sast.expressao) = Obj.magic ed in
        let pos0 : (
# 42 "sintatico.mly"
       (Lexing.position)
# 3157 "sintatico.ml"
        ) = Obj.magic pos0 in
        let ee : (Sast.expressao) = Obj.magic ee in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ee_ in
        let _endpos = _endpos_ed_ in
        let _v : (Sast.expressao) = let op =
          let pos = pos0 in
          
# 233 "sintatico.mly"
                              ( (Mult, pos) )
# 3168 "sintatico.ml"
          
        in
        
# 208 "sintatico.mly"
                                     ( ExpOp (op, ee, ed) )
# 3174 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = pos;
            MenhirLib.EngineTypes.startp = _startpos_pos_;
            MenhirLib.EngineTypes.endp = _endpos_pos_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Sast.expressao) = Obj.magic e in
        let pos : (
# 29 "sintatico.mly"
       (Lexing.position)
# 3201 "sintatico.ml"
        ) = Obj.magic pos in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pos_ in
        let _endpos = _endpos_e_ in
        let _v : (Sast.expressao) = 
# 210 "sintatico.mly"
                                     ( ExpUn ((UMenos, pos), e) )
# 3209 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = pos;
            MenhirLib.EngineTypes.startp = _startpos_pos_;
            MenhirLib.EngineTypes.endp = _endpos_pos_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Sast.expressao) = Obj.magic e in
        let pos : (
# 39 "sintatico.mly"
       (Lexing.position)
# 3236 "sintatico.ml"
        ) = Obj.magic pos in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pos_ in
        let _endpos = _endpos_e_ in
        let _v : (Sast.expressao) = 
# 211 "sintatico.mly"
                                     ( ExpUn ((Not, pos), e) )
# 3244 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ef;
          MenhirLib.EngineTypes.startp = _startpos_ef_;
          MenhirLib.EngineTypes.endp = _endpos_ef_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ef : (Sast.expressao) = Obj.magic ef in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ef_ in
        let _endpos = _endpos_ef_ in
        let _v : (Sast.expressao) = 
# 212 "sintatico.mly"
                                     ( ef )
# 3269 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = cs;
            MenhirLib.EngineTypes.startp = _startpos_cs_;
            MenhirLib.EngineTypes.endp = _endpos_cs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = ds;
              MenhirLib.EngineTypes.startp = _startpos_ds_;
              MenhirLib.EngineTypes.endp = _endpos_ds_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _7;
                  MenhirLib.EngineTypes.startp = _startpos__7_;
                  MenhirLib.EngineTypes.endp = _endpos__7_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = nome;
                        MenhirLib.EngineTypes.startp = _startpos_nome_;
                        MenhirLib.EngineTypes.endp = _endpos_nome_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = t;
                          MenhirLib.EngineTypes.startp = _startpos_t_;
                          MenhirLib.EngineTypes.endp = _endpos_t_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = _2;
                            MenhirLib.EngineTypes.startp = _startpos__2_;
                            MenhirLib.EngineTypes.endp = _endpos__2_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (
# 25 "sintatico.mly"
       (Lexing.position)
# 3340 "sintatico.ml"
        ) = Obj.magic _11 in
        let cs : (Sast.expressao Ast.comandos) = Obj.magic cs in
        let ds : (Ast.declaracao list list) = Obj.magic ds in
        let _8 : (
# 24 "sintatico.mly"
       (Lexing.position)
# 3347 "sintatico.ml"
        ) = Obj.magic _8 in
        let _7 : (
# 13 "sintatico.mly"
       (Lexing.position)
# 3352 "sintatico.ml"
        ) = Obj.magic _7 in
        let params : ((Ast.ident Ast.pos * Ast.tipo) list) = Obj.magic params in
        let _5 : (
# 12 "sintatico.mly"
       (Lexing.position)
# 3358 "sintatico.ml"
        ) = Obj.magic _5 in
        let nome : (
# 71 "sintatico.mly"
       (string * Lexing.position)
# 3363 "sintatico.ml"
        ) = Obj.magic nome in
        let t : (Ast.tipo) = Obj.magic t in
        let _2 : (
# 22 "sintatico.mly"
       (Lexing.position)
# 3369 "sintatico.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 20 "sintatico.mly"
       (Lexing.position)
# 3374 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Sast.expressao Ast.funcao) = 
# 109 "sintatico.mly"
                ( DecFun {fn_nome=nome; fn_tiporet=t; fn_formais=params; fn_locais=(List.flatten ds); fn_corpo=cs} )
# 3382 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Sast.expressao Ast.funcao list) = 
# 102 "sintatico.mly"
                              ( [] )
# 3400 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = fs;
          MenhirLib.EngineTypes.startp = _startpos_fs_;
          MenhirLib.EngineTypes.endp = _endpos_fs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let fs : (Sast.expressao Ast.funcao list) = Obj.magic fs in
        let f : (Sast.expressao Ast.funcao) = Obj.magic f in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_fs_ in
        let _v : (Sast.expressao Ast.funcao list) = 
# 103 "sintatico.mly"
                              ( f :: fs )
# 3431 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Ast.declaracao list list) = 
# 199 "/home/chuno/.opam/4.05.0/lib/menhir/standard.mly"
    ( [] )
# 3449 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Ast.declaracao list list) = Obj.magic xs in
        let x : (Ast.declaracao list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Ast.declaracao list list) = 
# 201 "/home/chuno/.opam/4.05.0/lib/menhir/standard.mly"
    ( x :: xs )
# 3480 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (
# 71 "sintatico.mly"
       (string * Lexing.position)
# 3506 "sintatico.ml"
        ) = Obj.magic x in
        let t : (Ast.tipo) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_x_ in
        let _v : (Ast.ident Ast.pos * Ast.tipo) = 
# 120 "sintatico.mly"
                        ( (x, t) )
# 3515 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Ast.ident Ast.pos * Ast.tipo) list) = 
# 115 "sintatico.mly"
                                            ( [] )
# 3533 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let p : (Ast.ident Ast.pos * Ast.tipo) = Obj.magic p in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_p_ in
        let _v : ((Ast.ident Ast.pos * Ast.tipo) list) = 
# 116 "sintatico.mly"
                                            ( [p] )
# 3558 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ps;
          MenhirLib.EngineTypes.startp = _startpos_ps_;
          MenhirLib.EngineTypes.endp = _endpos_ps_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ps : ((Ast.ident Ast.pos * Ast.tipo) list) = Obj.magic ps in
        let _2 : (
# 44 "sintatico.mly"
       (Lexing.position)
# 3590 "sintatico.ml"
        ) = Obj.magic _2 in
        let p : (Ast.ident Ast.pos * Ast.tipo) = Obj.magic p in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_ps_ in
        let _v : ((Ast.ident Ast.pos * Ast.tipo) list) = 
# 117 "sintatico.mly"
                                            ( p :: ps )
# 3599 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Sast.expressao Ast.comandos option) = 
# 164 "sintatico.mly"
                                            ( None )
# 3617 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = cs;
            MenhirLib.EngineTypes.startp = _startpos_cs_;
            MenhirLib.EngineTypes.endp = _endpos_cs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 25 "sintatico.mly"
       (Lexing.position)
# 3653 "sintatico.ml"
        ) = Obj.magic _4 in
        let cs : (Sast.expressao Ast.comandos) = Obj.magic cs in
        let _2 : (
# 24 "sintatico.mly"
       (Lexing.position)
# 3659 "sintatico.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 30 "sintatico.mly"
       (Lexing.position)
# 3664 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Sast.expressao Ast.comandos option) = 
# 165 "sintatico.mly"
                                            ( Some cs )
# 3672 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let c : (Sast.expressao Ast.comando) = Obj.magic c in
        let _1 : (
# 30 "sintatico.mly"
       (Lexing.position)
# 3699 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_c_ in
        let _v : (Sast.expressao Ast.comandos option) = 
# 166 "sintatico.mly"
                                            ( Some [c] )
# 3707 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _13;
          MenhirLib.EngineTypes.startp = _startpos__13_;
          MenhirLib.EngineTypes.endp = _endpos__13_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _12;
            MenhirLib.EngineTypes.startp = _startpos__12_;
            MenhirLib.EngineTypes.endp = _endpos__12_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = fsb;
              MenhirLib.EngineTypes.startp = _startpos_fsb_;
              MenhirLib.EngineTypes.endp = _endpos_fsb_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = cs;
                  MenhirLib.EngineTypes.startp = _startpos_cs_;
                  MenhirLib.EngineTypes.endp = _endpos_cs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ds;
                    MenhirLib.EngineTypes.startp = _startpos_ds_;
                    MenhirLib.EngineTypes.endp = _endpos_ds_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _7;
                      MenhirLib.EngineTypes.startp = _startpos__7_;
                      MenhirLib.EngineTypes.endp = _endpos__7_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _6;
                        MenhirLib.EngineTypes.startp = _startpos__6_;
                        MenhirLib.EngineTypes.endp = _endpos__6_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = fsa;
                          MenhirLib.EngineTypes.startp = _startpos_fsa_;
                          MenhirLib.EngineTypes.endp = _endpos_fsa_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = _4;
                            MenhirLib.EngineTypes.startp = _startpos__4_;
                            MenhirLib.EngineTypes.endp = _endpos__4_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.semv = _3;
                              MenhirLib.EngineTypes.startp = _startpos__3_;
                              MenhirLib.EngineTypes.endp = _endpos__3_;
                              MenhirLib.EngineTypes.next = {
                                MenhirLib.EngineTypes.semv = _2;
                                MenhirLib.EngineTypes.startp = _startpos__2_;
                                MenhirLib.EngineTypes.endp = _endpos__2_;
                                MenhirLib.EngineTypes.next = {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _13 : unit = Obj.magic _13 in
        let _12 : (
# 25 "sintatico.mly"
       (Lexing.position)
# 3789 "sintatico.ml"
        ) = Obj.magic _12 in
        let fsb : (Sast.expressao Ast.funcao list) = Obj.magic fsb in
        let _10 : (
# 25 "sintatico.mly"
       (Lexing.position)
# 3795 "sintatico.ml"
        ) = Obj.magic _10 in
        let cs : (Sast.expressao Ast.comandos) = Obj.magic cs in
        let ds : (Ast.declaracao list list) = Obj.magic ds in
        let _7 : (
# 24 "sintatico.mly"
       (Lexing.position)
# 3802 "sintatico.ml"
        ) = Obj.magic _7 in
        let _6 : (
# 11 "sintatico.mly"
       (Lexing.position)
# 3807 "sintatico.ml"
        ) = Obj.magic _6 in
        let fsa : (Sast.expressao Ast.funcao list) = Obj.magic fsa in
        let _4 : (
# 24 "sintatico.mly"
       (Lexing.position)
# 3813 "sintatico.ml"
        ) = Obj.magic _4 in
        let _3 : (
# 71 "sintatico.mly"
       (string * Lexing.position)
# 3818 "sintatico.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 21 "sintatico.mly"
       (Lexing.position)
# 3823 "sintatico.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 20 "sintatico.mly"
       (Lexing.position)
# 3828 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__13_ in
        let _v : (
# 87 "sintatico.mly"
       (Sast.expressao Ast.programa)
# 3836 "sintatico.ml"
        ) = 
# 99 "sintatico.mly"
           ( Programa (List.flatten ds, fsa @ fsb, cs) )
# 3840 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 71 "sintatico.mly"
       (string * Lexing.position)
# 3861 "sintatico.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Ast.ident Ast.pos list) = 
# 229 "/home/chuno/.opam/4.05.0/lib/menhir/standard.mly"
    ( [ x ] )
# 3869 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Ast.ident Ast.pos list) = Obj.magic xs in
        let _2 : (
# 44 "sintatico.mly"
       (Lexing.position)
# 3901 "sintatico.ml"
        ) = Obj.magic _2 in
        let x : (
# 71 "sintatico.mly"
       (string * Lexing.position)
# 3906 "sintatico.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Ast.ident Ast.pos list) = 
# 231 "/home/chuno/.opam/4.05.0/lib/menhir/standard.mly"
    ( x :: xs )
# 3914 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 62 "sintatico.mly"
       (Lexing.position)
# 3935 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Ast.tipo) = 
# 241 "sintatico.mly"
               ( Bool )
# 3943 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 26 "sintatico.mly"
       (Lexing.position)
# 3964 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Ast.tipo) = 
# 242 "sintatico.mly"
               ( Int )
# 3972 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 45 "sintatico.mly"
       (Lexing.position)
# 3993 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Ast.tipo) = 
# 243 "sintatico.mly"
               ( Float )
# 4001 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 57 "sintatico.mly"
       (Lexing.position)
# 4022 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Ast.tipo) = 
# 244 "sintatico.mly"
               ( Char )
# 4030 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 40 "sintatico.mly"
       (Lexing.position)
# 4051 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Ast.tipo) = 
# 245 "sintatico.mly"
               ( String )
# 4059 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 23 "sintatico.mly"
       (Lexing.position)
# 4080 "sintatico.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Ast.tipo) = 
# 246 "sintatico.mly"
               ( Void )
# 4088 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 71 "sintatico.mly"
       (string * Lexing.position)
# 4109 "sintatico.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Sast.expressao Ast.variavel) = 
# 237 "sintatico.mly"
                (VarSimples x )
# 4117 "sintatico.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
end

let programa =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 0 lexer lexbuf) : (
# 87 "sintatico.mly"
       (Sast.expressao Ast.programa)
# 4148 "sintatico.ml"
    ))

module Incremental = struct
  
  let programa =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (
# 87 "sintatico.mly"
       (Sast.expressao Ast.programa)
# 4158 "sintatico.ml"
      ) MenhirInterpreter.checkpoint)
  
end

# 233 "/home/chuno/.opam/4.05.0/lib/menhir/standard.mly"
  

# 4166 "sintatico.ml"
